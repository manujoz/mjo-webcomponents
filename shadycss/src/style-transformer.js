"use strict";import{StyleNode}from"./css-parse.js";import*as StyleUtil from"./style-util.js";import{nativeShadow}from"./style-settings.js";const SCOPE_NAME="style-scope";class StyleTransformer{get SCOPE_NAME(){return SCOPE_NAME}dom(node,scope,shouldRemoveScope){const fn=node=>{this.element(node,scope||"",shouldRemoveScope)};this._transformDom(node,fn)}domAddScope(node,scope){const fn=node=>{this.element(node,scope||"")};this._transformDom(node,fn)}_transformDom(startNode,transformer){if(startNode.nodeType===Node.ELEMENT_NODE){transformer(startNode)}let c$;if("template"===startNode.localName){const template=startNode;c$=(template.content||template._content||template).childNodes}else{c$=startNode.children||startNode.childNodes}if(c$){for(let i=0;i<c$.length;i++){this._transformDom(c$[i],transformer)}}}element(element,scope,shouldRemoveScope){if(scope){if(element.classList){if(shouldRemoveScope){element.classList.remove(SCOPE_NAME);element.classList.remove(scope)}else{element.classList.add(SCOPE_NAME);element.classList.add(scope)}}else if(element.getAttribute){let c=element.getAttribute(CLASS);if(shouldRemoveScope){if(c){let newValue=c.replace(SCOPE_NAME,"").replace(scope,"");StyleUtil.setElementClassRaw(element,newValue)}}else{let newValue=(c?c+" ":"")+SCOPE_NAME+" "+scope;StyleUtil.setElementClassRaw(element,newValue)}}}}domReplaceScope(node,oldScope,newScope){const fn=node=>{this.element(node,oldScope,!0);this.element(node,newScope)};this._transformDom(node,fn)}domRemoveScope(node,oldScope){const fn=node=>{this.element(node,oldScope||"",!0)};this._transformDom(node,fn)}elementStyles(element,styleRules,callback,cssBuild="",cssText=""){if(""===cssText){if(nativeShadow||"shady"===cssBuild){cssText=StyleUtil.toCssText(styleRules,callback)}else{let{is,typeExtension}=StyleUtil.getIsExtends(element);cssText=this.css(styleRules,is,typeExtension,callback)+"\n\n"}}return cssText.trim()}css(rules,scope,ext,callback){let hostScope=this._calcHostScope(scope,ext);scope=this._calcElementScope(scope);let self=this;return StyleUtil.toCssText(rules,function(rule){if(!rule.isScoped){self.rule(rule,scope,hostScope);rule.isScoped=!0}if(callback){callback(rule,scope,hostScope)}})}_calcElementScope(scope){if(scope){return CSS_CLASS_PREFIX+scope}else{return""}}_calcHostScope(scope,ext){return ext?`[is=${scope}]`:scope}rule(rule,scope,hostScope){this._transformRule(rule,this._transformComplexSelector,scope,hostScope)}_transformRule(rule,transformer,scope,hostScope){rule.selector=rule.transformedSelector=this._transformRuleCss(rule,transformer,scope,hostScope)}_transformRuleCss(rule,transformer,scope,hostScope){let p$=StyleUtil.splitSelectorList(rule.selector);if(!StyleUtil.isKeyframesSelector(rule)){for(let i=0,l=p$.length,p;i<l&&(p=p$[i]);i++){p$[i]=transformer.call(this,p,scope,hostScope)}}return p$.filter(part=>!!part).join(COMPLEX_SELECTOR_SEP)}_twiddleNthPlus(selector){return selector.replace(NTH,(m,type,inside)=>{if(-1<inside.indexOf("+")){inside=inside.replace(/\+/g,"___")}else if(-1<inside.indexOf("___")){inside=inside.replace(/___/g,"+")}return`:${type}(${inside})`})}_preserveMatchesPseudo(selector){const matches=[];let match;while(match=selector.match(MATCHES)){const start=match.index,end=StyleUtil.findMatchingParen(selector,start);if(-1===end){throw new Error(`${match.input} selector missing ')'`)}const part=selector.slice(start,end+1);selector=selector.replace(part,MATCHES_REPLACEMENT);matches.push(part)}return{selector,matches}}_replaceMatchesPseudo(selector,matches){const parts=selector.split(MATCHES_REPLACEMENT);return matches.reduce((acc,cur,idx)=>acc+cur+parts[idx+1],parts[0])}_transformComplexSelector(selector,scope,hostScope){let stop=!1;selector=selector.trim();let isNth=NTH.test(selector);if(isNth){selector=selector.replace(NTH,(m,type,inner)=>`:${type}(${inner.replace(/\s/g,"")})`);selector=this._twiddleNthPlus(selector)}const isMatches=MATCHES.test(selector);let matches;if(isMatches){({selector,matches}=this._preserveMatchesPseudo(selector))}selector=selector.replace(SLOTTED_START,`${HOST} $1`);selector=selector.replace(SIMPLE_SELECTOR_SEP,(m,c,s)=>{if(!stop){let info=this._transformCompoundSelector(s,c,scope,hostScope);stop=stop||info.stop;c=info.combinator;s=info.value}return c+s});if(isMatches){selector=this._replaceMatchesPseudo(selector,matches)}if(isNth){selector=this._twiddleNthPlus(selector)}return selector}_transformCompoundSelector(selector,combinator,scope,hostScope){let slottedIndex=selector.indexOf(SLOTTED);if(0<=selector.indexOf(HOST)){selector=this._transformHostSelector(selector,hostScope)}else if(0!==slottedIndex){selector=scope?this._transformSimpleSelector(selector,scope):selector}let slotted=!1;if(0<=slottedIndex){combinator="";slotted=!0}let stop;if(slotted){stop=!0;if(slotted){selector=selector.replace(SLOTTED_PAREN,(m,paren)=>` > ${paren}`)}}selector=selector.replace(DIR_PAREN,(m,before,dir)=>`[dir="${dir}"] ${before}, ${before}[dir="${dir}"]`);return{value:selector,combinator,stop}}_transformSimpleSelector(selector,scope){const attributes=selector.split(/(\[.+?\])/),output=[];for(let i=0;i<attributes.length;i++){if(1===i%2){output.push(attributes[i])}else{const part=attributes[i];if(!(""===part&&i===attributes.length-1)){let p$=part.split(PSEUDO_PREFIX);p$[0]+=scope;output.push(p$.join(PSEUDO_PREFIX))}}}return output.join("")}_transformHostSelector(selector,hostScope){let m=selector.match(HOST_PAREN),paren=m&&m[2].trim()||"";if(paren){if(!paren[0].match(SIMPLE_SELECTOR_PREFIX)){let typeSelector=paren.split(SIMPLE_SELECTOR_PREFIX)[0];if(typeSelector===hostScope){return paren}else{return SELECTOR_NO_MATCH}}else{return selector.replace(HOST_PAREN,function(m,host,paren){return hostScope+paren})}}else{return selector.replace(HOST,hostScope)}}documentRule(rule){rule.selector=rule.parsedSelector;this.normalizeRootSelector(rule);this._transformRule(rule,this._transformDocumentSelector)}normalizeRootSelector(rule){if(rule.selector===ROOT){rule.selector="html"}}_transformDocumentSelector(selector){if(selector.match(HOST)){return""}else if(selector.match(SLOTTED)){return this._transformComplexSelector(selector,SCOPE_DOC_SELECTOR)}else{return this._transformSimpleSelector(selector.trim(),SCOPE_DOC_SELECTOR)}}}const NTH=/:(nth[-\w]+)\(([^)]+)\)/,SCOPE_DOC_SELECTOR=`:not(.${SCOPE_NAME})`,COMPLEX_SELECTOR_SEP=",",SIMPLE_SELECTOR_SEP=/(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,SIMPLE_SELECTOR_PREFIX=/[[.:#*]/,HOST=":host",ROOT=":root",SLOTTED="::slotted",SLOTTED_START=new RegExp(`^(${SLOTTED})`),HOST_PAREN=/(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,SLOTTED_PAREN=/(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,DIR_PAREN=/(.*):dir\((?:(ltr|rtl))\)/,CSS_CLASS_PREFIX=".",PSEUDO_PREFIX=":",CLASS="class",SELECTOR_NO_MATCH="should_not_match",MATCHES=/:(?:matches|any|-(?:webkit|moz)-any)/,MATCHES_REPLACEMENT="\uE000";export default new StyleTransformer;